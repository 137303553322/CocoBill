package com.copasso.cocobill.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.copasso.cocobill.model.bean.BBill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BBILL".
*/
public class BBillDao extends AbstractDao<BBill, Integer> {

    public static final String TABLENAME = "BBILL";

    /**
     * Properties of entity BBill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Rid = new Property(1, int.class, "rid", false, "RID");
        public final static Property Cost = new Property(2, double.class, "cost", false, "COST");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Userid = new Property(4, int.class, "userid", false, "USERID");
        public final static Property Payid = new Property(5, int.class, "payid", false, "PAYID");
        public final static Property Sortid = new Property(6, int.class, "sortid", false, "SORTID");
        public final static Property Crdate = new Property(7, long.class, "crdate", false, "CRDATE");
        public final static Property Income = new Property(8, boolean.class, "income", false, "INCOME");
        public final static Property Version = new Property(9, int.class, "version", false, "VERSION");
    }


    public BBillDao(DaoConfig config) {
        super(config);
    }
    
    public BBillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BBILL\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"RID\" INTEGER NOT NULL ," + // 1: rid
                "\"COST\" REAL NOT NULL ," + // 2: cost
                "\"CONTENT\" TEXT," + // 3: content
                "\"USERID\" INTEGER NOT NULL ," + // 4: userid
                "\"PAYID\" INTEGER NOT NULL ," + // 5: payid
                "\"SORTID\" INTEGER NOT NULL ," + // 6: sortid
                "\"CRDATE\" INTEGER NOT NULL ," + // 7: crdate
                "\"INCOME\" INTEGER NOT NULL ," + // 8: income
                "\"VERSION\" INTEGER NOT NULL );"); // 9: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BBILL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BBill entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRid());
        stmt.bindDouble(3, entity.getCost());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getUserid());
        stmt.bindLong(6, entity.getPayid());
        stmt.bindLong(7, entity.getSortid());
        stmt.bindLong(8, entity.getCrdate());
        stmt.bindLong(9, entity.getIncome() ? 1L: 0L);
        stmt.bindLong(10, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BBill entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRid());
        stmt.bindDouble(3, entity.getCost());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getUserid());
        stmt.bindLong(6, entity.getPayid());
        stmt.bindLong(7, entity.getSortid());
        stmt.bindLong(8, entity.getCrdate());
        stmt.bindLong(9, entity.getIncome() ? 1L: 0L);
        stmt.bindLong(10, entity.getVersion());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public BBill readEntity(Cursor cursor, int offset) {
        BBill entity = new BBill( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // rid
            cursor.getDouble(offset + 2), // cost
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getInt(offset + 4), // userid
            cursor.getInt(offset + 5), // payid
            cursor.getInt(offset + 6), // sortid
            cursor.getLong(offset + 7), // crdate
            cursor.getShort(offset + 8) != 0, // income
            cursor.getInt(offset + 9) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BBill entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setRid(cursor.getInt(offset + 1));
        entity.setCost(cursor.getDouble(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserid(cursor.getInt(offset + 4));
        entity.setPayid(cursor.getInt(offset + 5));
        entity.setSortid(cursor.getInt(offset + 6));
        entity.setCrdate(cursor.getLong(offset + 7));
        entity.setIncome(cursor.getShort(offset + 8) != 0);
        entity.setVersion(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(BBill entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(BBill entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BBill entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
